// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MemoryClient is the client API for Memory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemoryClient interface {
	Get(ctx context.Context, in *GetMemoryRequest, opts ...grpc.CallOption) (*MemoryResponse, error)
	Set(ctx context.Context, in *SetMemoryRequest, opts ...grpc.CallOption) (*MemoryResponse, error)
}

type memoryClient struct {
	cc grpc.ClientConnInterface
}

func NewMemoryClient(cc grpc.ClientConnInterface) MemoryClient {
	return &memoryClient{cc}
}

func (c *memoryClient) Get(ctx context.Context, in *GetMemoryRequest, opts ...grpc.CallOption) (*MemoryResponse, error) {
	out := new(MemoryResponse)
	err := c.cc.Invoke(ctx, "/memory.Memory/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memoryClient) Set(ctx context.Context, in *SetMemoryRequest, opts ...grpc.CallOption) (*MemoryResponse, error) {
	out := new(MemoryResponse)
	err := c.cc.Invoke(ctx, "/memory.Memory/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemoryServer is the server API for Memory service.
// All implementations must embed UnimplementedMemoryServer
// for forward compatibility
type MemoryServer interface {
	Get(context.Context, *GetMemoryRequest) (*MemoryResponse, error)
	Set(context.Context, *SetMemoryRequest) (*MemoryResponse, error)
	mustEmbedUnimplementedMemoryServer()
}

// UnimplementedMemoryServer must be embedded to have forward compatible implementations.
type UnimplementedMemoryServer struct {
}

func (UnimplementedMemoryServer) Get(context.Context, *GetMemoryRequest) (*MemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMemoryServer) Set(context.Context, *SetMemoryRequest) (*MemoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedMemoryServer) mustEmbedUnimplementedMemoryServer() {}

// UnsafeMemoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemoryServer will
// result in compilation errors.
type UnsafeMemoryServer interface {
	mustEmbedUnimplementedMemoryServer()
}

func RegisterMemoryServer(s grpc.ServiceRegistrar, srv MemoryServer) {
	s.RegisterService(&_Memory_serviceDesc, srv)
}

func _Memory_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/memory.Memory/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServer).Get(ctx, req.(*GetMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Memory_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemoryServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/memory.Memory/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemoryServer).Set(ctx, req.(*SetMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Memory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "memory.Memory",
	HandlerType: (*MemoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Memory_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Memory_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "memory.proto",
}
